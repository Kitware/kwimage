### TEMPLATES ###
# Define common templates using YAML anchors

stages:
  - build
  - test

.common_template: &common_template
    tags:
        # Tags define which runners will accept which jobs
        - docker
        - linux
    
    
.multibuild_template: &multibuild_template
    <<: 
        - *common_template

    stage: 
        build

    image: quay.io/pypa/manylinux2010_x86_64

    script: 
        - MB_PYTHON_TAG=$(echo ${CI_JOB_NAME} | sed 's/.*\/\(.*\)-manylinux2010/\1/')
        - ls
        - MB_PYTHON_TAG=$MB_PYTHON_TAG _INSIDE_DOCKER=YES ./run_multibuild.sh

    variables:
        # Change pip's cache directory to be inside the project directory since we can
        # only cache local items.
        PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

    artifacts:
        paths:
            - wheelhouse/*.whl


.test_template: &test_template
    <<: 
        - *common_template

    stage: 
        test

    before_script:
        # Setup the correct version of python on this manylinux instance
        - python --version  # Print out python version for debugging
        - python -m pip install virtualenv
        - python -m virtualenv venv
        - source venv/bin/activate
        # 
        - pip install pip -U
        - pip install pip setuptools -U
        - pip install -r requirements.txt

    script: 
        - MB_PYTHON_TAG=$(echo ${CI_JOB_NAME} | sed 's/.*\/\(.*\)-manylinux2010/\1/')
        - ls wheelhouse
        - pip install wheelhouse/kwimage*-${MB_PYTHON_TAG}-manylinux2010_x86_64.whl 
        - xdoctest -m kwimage
        # Hack to test the installed wheel. TODO: make run_tests work better in this case.
        - mkdir -p foo && cd foo && pytest --cov-config ../.coveragerc --cov-report html --cov-report term --cov=kwimage --xdoc $(python -c "import ubelt; print(ubelt.modname_to_modpath('kwimage'))") ../tests
          
    # Coverage is a regex that will parse the coverage from the test stdout
    coverage: '/TOTAL.+ ([0-9]{1,3}%)/'

    variables:
        # Change pip's cache directory to be inside the project directory since we can
        # only cache local items.
        PIP_CACHE_DIR: "$CI_PROJECT_DIR/mb_work/cache_pip"

    #cache:
    #    paths:
    #        - .cache/pip
    #        - venv/

    #artifacts:
    #    paths:
    #        - dist/*.whl

#.deploy_template: &deploy_template
#    script:
#        - python bdist_wheel
#    #sudo apt update
#    #sudo apt install snapd
#    #sudo snap install patchelf --edge --classic
      


### JOBS ###
# Define the actual jobs


build/cp27-cp27mu-manylinux2010:
    <<: 
        - *multibuild_template


build/cp37-cp37m-manylinux2010:
    <<: 
        - *multibuild_template

test/cp37-cp37m-manylinux2010:
    <<: 
        - *test_template
    image:
        python:3.7


#wheel/cp27-cp27m-manylinux2010:
#    <<: 
#        - *build_test_template


#wheel/cp35-cp35m-manylinux2010:
#    <<: 
#        - *build_test_template


#wheel/cp36-cp36m-manylinux2010:
#    <<: 
#        - *build_test_template


#wheel/cp37-cp37m-manylinux2010:
#    <<: 
#        - *build_test_template
