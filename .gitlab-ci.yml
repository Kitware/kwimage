# Note: expand yaml
# yaml merge-expand .gitlab-ci.yml _expandyml && cat _expandyml
# 
# GITLAB LINTER
# https://gitlab.kitware.com/computer-vision/kwimage/-/ci/lint


# This CI file has 4 types of jobs:
# (1) in the build stage we we build the wheels on a manylinux docker image
# (2) then in the test stage we install the wheels, run unit tests, and measure coverage
# (3) after testing we sign the wheels with the CI's GPG key
# (4) finally if we are on the release branch we will push the signed wheels to pypi

stages:
  - cibuildwheel
  - build
  - test
  - gpgsign
  - deploy


# Test new type of jobs
cibuildwheel: 
    stage: 
        cibuildwheel

    tags:
        # Tags define which runners will accept which jobs
        - linux
        - docker
        - privileged

    image: ubuntu:21.04
    #python:3.8

    script:
        - export DEBIAN_FRONTEND=noninteractive
        - apt update && apt install curl podman git iptables aufs-tools python3-pip -y   
        - podman --version
        # && rm -rf /var/lib/apt/lists/*  
        # - yum install git -y
        # - curl -sSL https://get.docker.com/ | sh
        #- python -m pip install cibuildwheel==1.11.0
        #- |
        #        curl_verify_sha256(){
        #            URL=$1
        #            DST=$2
        #            EXPECTED_SHA256=$3
        #            curl $URL --output $DST
        #            GOT_SHA256=$(sha256sum $DST | cut -d" " -f1)
        #            echo "GOT_SHA256      = $GOT_SHA256"
        #            echo "EXPECTED_SHA256 = $EXPECTED_SHA256"
        #            # For security, it is important to verify the hash
        #            if [[ "$GOT_SHA256" != $EXPECTED_SHA256* ]]; then
        #                echo "Downloaded file does not match hash!"
        #                echo "DO NOT CONTINUE WITHOUT VALIDATING NEW VERSION AND UPDATING THE HASH!"
        #            else
        #                echo "Hashes match well enough"
        #            fi
        #        }
        #        curl_verify_sha256 https://bootstrap.pypa.io/get-pip.py get-pip.py f499d76e0149a673fb8246d88e116db589afbd291739bd84f2cd9a7bca7b6993
        #        python3 get-pip.py
        #        python3 -m pip config set global.disable-pip-version-check True
        #        python3 -m pip install pip -U
        - python3 -m pip install git+https://github.com/Erotemic/cibuildwheel.git@dev/flow
        #- #ln -s $(pwd) /project || echo "project folder already exists"
        ###
        - pwd
        - ls -al
        #- #ls -al /project
        - cibuildwheel --output-dir wheelhouse --platform linux

    artifacts:
        paths:
            - wheelhouse/


#cibuildwheel --output-dir wheelhouse --platform linux --archs x86_64
#cibuildwheel --output-dir wheelhouse --platform linux --archs x86_64,i686,aarch64,ppc64le,s390x,universal2,arm64,x86,AMD64


### TEMPLATES ###
# Define common templates using YAML anchors

.common_template: &common_template
    tags:
        # Tags define which runners will accept which jobs
        - docker
        - linux
        - build

    variables:
        # Change pip's cache directory to be inside the project directory since we can
        # only cache local items.
        PIP_CACHE_DIR: "$CI_PROJECT_DIR/mb_work/cache_pip"
    
    
.manylinux_build_template: &manylinux_build_template
    <<: 
        - *common_template

    stage: 
        build

    image: quay.io/manylinux2010_x86_64

    script: 
        - MB_PYTHON_TAG=$(echo ${CI_JOB_NAME} | sed 's/.*\/\(.*\)-manylinux2010/\1/')
        - ls
        - MB_PYTHON_TAG=$MB_PYTHON_TAG _INSIDE_DOCKER=YES ./run_manylinux_build.sh

    artifacts:
        paths:
            - wheelhouse/*.whl


.test_full_template: &test_full_template
    <<: 
        - *common_template

    stage: 
        test

    before_script:
        # Setup the correct version of python on this manylinux instance
        - python --version  # Print out python version for debugging
        - python -m pip install virtualenv
        - python -m virtualenv venv
        - source venv/bin/activate
        # 
        - pip install pip -U
        - pip install setuptools -U
        - pip install -r requirements.txt -U
        - pip install opencv-python-headless

    script: 
        - echo "skipping tests for now"
        ## FIXME: we should start from a docker iamge that already has LibGL setup
        #- apt update && apt install libgl1-mesa-glx -y && rm -rf /var/lib/apt/lists/*  
        #- ls wheelhouse
        #- MB_PYTHON_TAG=$(echo ${CI_JOB_NAME} | sed 's/.*\/\(.*\)-manylinux2010/\1/')
        #- VERSION=$(python -c "import setup; print(setup.VERSION)")
        #- BDIST_WHEEL_PATH=wheelhouse/kwimage-${VERSION}-${MB_PYTHON_TAG}-*manylinux2010_x86_64.whl
        #- pip install $BDIST_WHEEL_PATH
        #- pip install pygments
        ## - xdoctest -m kwimage --style=google all
        ## - xdoctest kwimage --style=google all --mask 
        ## Hack to test the installed wheel. TODO: make run_tests work better in this case.
        #- mkdir -p foo && cd foo && pytest --cov-config ../.coveragerc --cov-report html --cov-report term --cov=kwimage --xdoc $(python -c "import ubelt; print(ubelt.modname_to_modpath('kwimage'))") ../tests
          
    # Coverage is a regex that will parse the coverage from the test stdout
    coverage: '/TOTAL.+ ([0-9]{1,3}%)/'


.test_minimal_template: &test_minimal_template
    <<: 
        - *common_template

    stage: 
        test

    before_script:
        # Setup the correct version of python on this manylinux instance
        - python --version  # Print out python version for debugging
        - python -m pip install virtualenv
        - python -m virtualenv venv
        - source venv/bin/activate
        - pip install pip -U
        - pip install setuptools -U
        - pip install -r requirements/runtime.txt -U
        - pip install -r requirements/tests.txt -U
        - pip install opencv-python-headless
        #- pip install -r requirements/build.txt

    script: 
        - echo "skipping tests for now"
        # FIXME: we should start from a docker iamge that already has LibGL setup
        #- apt update && apt install libgl1-mesa-glx -y && rm -rf /var/lib/apt/lists/*  
        #- ls wheelhouse
        #- MB_PYTHON_TAG=py3-none-any
        #- VERSION=$(python -c "import setup; print(setup.VERSION)")
        #- BDIST_WHEEL_PATH=dist/kwimage-${VERSION}-${MB_PYTHON_TAG}.whl
        #- pip install $BDIST_WHEEL_PATH
        #  #- xdoctest -m kwimage --style=google all
        #- pip install pygments
        ## Hack to test the installed wheel. TODO: make run_tests work better in this case.
        #- export KWIMAGE_DISABLE_C_EXTENSIONS=1
        #- pip install -r requirements/tests.txt
        #- mkdir -p foo && cd foo && python -m pytest --cov-config ../.coveragerc --cov-report html --cov-report term --cov=kwimage --xdoc $(python -c "import ubelt; print(ubelt.modname_to_modpath('kwimage'))") ../tests
          
    # Coverage is a regex that will parse the coverage from the test stdout
    coverage: '/TOTAL.+ ([0-9]{1,3}%)/'


.__gpg_heredoc__: &__gpg_heredoc__
        - | 
            # THIS IS NOT EXECUTE ON THE CI, THIS IS FOR DEVELOPER REFERENCE
            # ON HOW THE ENCRYPTED GPG KEYS ARE SETUP.
            
            # Load or generate secrets
            load_secrets
            echo $CI_KITWARE_SECRET
            echo $TWINE_USERNAME

            # ADD RELEVANT VARIABLES TO GITLAB SECRET VARIABLES
            # https://gitlab.kitware.com/computer-vision/kwarray/-/settings/ci_cd
            # Note that it is important to make sure that these variables are
            # only decrpyted on protected branches by selecting the protected
            # and masked option. Also make sure you have master and release
            # branches protected.
            # https://gitlab.kitware.com/computer-vision/kwarray/-/settings/repository#js-protected-branches-settings

            # HOW TO ENCRYPT YOUR SECRET GPG KEY
            IDENTIFIER="travis-ci-Erotemic"
            GPG_KEYID=$(gpg --list-keys --keyid-format LONG "$IDENTIFIER" | head -n 2 | tail -n 1 | awk '{print $1}' | tail -c 9)
            echo "GPG_KEYID = $GPG_KEYID"

            # Export plaintext gpg public keys, private keys, and trust info
            mkdir -p dev
            gpg --armor --export-secret-keys $GPG_KEYID > dev/ci_secret_gpg_key.pgp
            gpg --armor --export $GPG_KEYID > dev/ci_public_gpg_key.pgp
            gpg --export-ownertrust > dev/gpg_owner_trust

            # Encrypt gpg keys and trust with CI secret
            GLKWS=$CI_KITWARE_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -e -a -in dev/ci_public_gpg_key.pgp > dev/ci_public_gpg_key.pgp.enc
            GLKWS=$CI_KITWARE_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -e -a -in dev/ci_secret_gpg_key.pgp > dev/ci_secret_gpg_key.pgp.enc
            GLKWS=$CI_KITWARE_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -e -a -in dev/gpg_owner_trust > dev/gpg_owner_trust.enc
            echo $GPG_KEYID > dev/public_gpg_key

            # Test decrpyt
            cat dev/public_gpg_key
            GLKWS=$CI_KITWARE_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -d -a -in dev/ci_public_gpg_key.pgp.enc 
            GLKWS=$CI_KITWARE_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -d -a -in dev/gpg_owner_trust.enc 
            GLKWS=$CI_KITWARE_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -d -a -in dev/ci_secret_gpg_key.pgp.enc 

            unload_secrets

            # Look at what we did, clean up, and add it to git
            ls dev/*.enc
            rm dev/gpg_owner_trust dev/*.pgp
            git status
            git add dev/*.enc
            git add dev/public_gpg_key


.gpgsign_template: &gpgsign_template
    <<: 
        - *common_template

    stage: 
        gpgsign

    script: 
        - ls wheelhouse
        - MB_PYTHON_TAG=$(echo ${CI_JOB_NAME} | sed 's/.*\/\(.*\)-manylinux2010/\1/')
        - VERSION=$(python -c "import setup; print(setup.VERSION)")
        - BDIST_WHEEL_PATH=wheelhouse/kwimage-${VERSION}-${MB_PYTHON_TAG}-*manylinux2010_x86_64.whl
        # Decrypt and import GPG Keys / trust
        - export GPG_EXECUTABLE=gpg
        - export GPG_KEYID=D297D757
        - $GPG_EXECUTABLE --version
        - openssl version
        - $GPG_EXECUTABLE --list-keys
        # note CI_KITWARE_SECRET is a protected variables only available on master and release branch
        - GLKWS=$CI_KITWARE_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -d -a -in dev/ci_public_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
        - GLKWS=$CI_KITWARE_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -d -a -in dev/gpg_owner_trust.enc | $GPG_EXECUTABLE --import-ownertrust
        - GLKWS=$CI_KITWARE_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -d -a -in dev/ci_secret_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
        - GPG_SIGN_CMD="$GPG_EXECUTABLE --batch --yes --detach-sign --armor --local-user $GPG_KEYID"
        #- # $GPG_EXECUTABLE --list-keys
        - echo "Signing wheels"
        - $GPG_SIGN_CMD --output $BDIST_WHEEL_PATH.asc $BDIST_WHEEL_PATH
        - ls wheelhouse
        - echo "Verifying wheels"
        - $GPG_EXECUTABLE --verify $BDIST_WHEEL_PATH.asc $BDIST_WHEEL_PATH  || echo "hack, the first run of gpg very fails"
        - $GPG_EXECUTABLE --verify $BDIST_WHEEL_PATH.asc $BDIST_WHEEL_PATH 
        - echo "Verified wheels"

    artifacts:
        paths:
            - wheelhouse/*.asc

    only:
        refs:
            # Gitlab will only expose protected variables on protected branches
            # (which I've set to be master and release), so only run this stage
            # there.
            - master
            - release


.deploy_template: &deploy_template
    <<: 
        - *common_template

    stage: 
        deploy

    script: 
        - pip install six pyopenssl ndg-httpsclient pyasn1 requests[security] twine -U 
        - ls wheelhouse
        - MB_PYTHON_TAG=$(echo ${CI_JOB_NAME} | sed 's/.*\/\(.*\)-manylinux2010/\1/')
        - VERSION=$(python -c "import setup; print(setup.VERSION)")
        - BDIST_WHEEL_PATH=wheelhouse/kwimage-${VERSION}-${MB_PYTHON_TAG}-*manylinux2010_x86_64.whl
        - echo "Checking wheels MB_PYTHON_TAG $MB_PYTHON_TAG VERSION $VERSION BDIST_WHEEL_PATH $BDIST_WHEEL_PATH"
        - ls -al ${BDIST_WHEEL_PATH}*
        - twine check $BDIST_WHEEL_PATH.asc $BDIST_WHEEL_PATH
        - echo "Uploading wheels"
        # todo, can we tag the branch here as well?
        # note TWINE_USERNAME and TWINE_PASSWORD are protected variables only available on master and release branch
        - twine upload --username $TWINE_USERNAME --password $TWINE_PASSWORD $BDIST_WHEEL_PATH.asc $BDIST_WHEEL_PATH
            
    only:
        refs:
            - release

### JOBS ###
# Define the actual jobs

# ---------------
# Python 3.8 Jobs

build/cp39-cp39-manylinux2010:
    <<: 
        - *manylinux_build_template

test_full/cp39-cp39-manylinux2010:
    <<: 
        - *test_full_template
    image:
        python:3.9

test_minimal/cp39-cp39-manylinux2010:
    <<: 
        - *test_minimal_template
    image:
        python:3.9

gpgsign/cp39-cp39-manylinux2010:
    <<: 
        - *gpgsign_template
    image:
        python:3.9

deploy/cp39-cp39-manylinux2010:
    <<: 
        - *deploy_template
    image:
        python:3.9

# ---------------
# Python 3.8 Jobs

build/cp38-cp38-manylinux2010:
    <<: 
        - *manylinux_build_template

test_full/cp38-cp38-manylinux2010:
    <<: 
        - *test_full_template
    image:
        python:3.8

test_minimal/cp38-cp38-manylinux2010:
    <<: 
        - *test_minimal_template
    image:
        python:3.8

gpgsign/cp38-cp38-manylinux2010:
    <<: 
        - *gpgsign_template
    image:
        python:3.8

deploy/cp38-cp38-manylinux2010:
    <<: 
        - *deploy_template
    image:
        python:3.8


# ---------------
# Python 3.7 Jobs

build/cp37-cp37m-manylinux2010:
    <<: 
        - *manylinux_build_template

test_full/cp37-cp37m-manylinux2010:
    <<: 
        - *test_full_template
    image:
        python:3.7

test_minimal/cp37-cp37m-manylinux2010:
    <<: 
        - *test_minimal_template
    image:
        python:3.7

gpgsign/cp37-cp37m-manylinux2010:
    <<: 
        - *gpgsign_template
    image:
        python:3.7

deploy/cp37-cp37m-manylinux2010:
    <<: 
        - *deploy_template
    image:
        python:3.7


# ---------------
# Python 3.6 Jobs

build/cp36-cp36m-manylinux2010:
    <<: 
        - *manylinux_build_template

test_full/cp36-cp36m-manylinux2010:
    <<: 
        - *test_full_template
    image:
        python:3.6

test_minimal/cp36-cp36m-manylinux2010:
    <<: 
        - *test_minimal_template
    image:
        python:3.6

gpgsign/cp36-cp36m-manylinux2010:
    <<: 
        - *gpgsign_template
    image:
        python:3.6

deploy/cp36-cp36m-manylinux2010:
    <<: 
        - *deploy_template
    image:
        python:3.6


# ---------------
# Python 3.5 Jobs

#build/cp35-cp35m-manylinux2010:
#    <<: 
#        - *manylinux_build_template

#test_full/cp35-cp35m-manylinux2010:
#    <<: 
#        - *test_full_template
#    image:
#        python:3.5

#test_minimal/cp35-cp35m-manylinux2010:
#    <<: 
#        - *test_minimal_template
#    image:
#        python:3.5

#gpgsign/cp35-cp35m-manylinux2010:
#    <<: 
#        - *gpgsign_template
#    image:
#        python:3.5

#deploy/cp35-cp35m-manylinux2010:
#    <<: 
#        - *deploy_template
#    image:
#        python:3.5


# ---------------
# Python 2.7 Jobs

#build/cp27-cp27mu-manylinux2010:
#    <<: 
#        - *manylinux_build_template

#test_full/cp27-cp27mu-manylinux2010:
#    <<: 
#        - *test_full_template
#    image:
#        python:2.7

#test_minimal/cp27-cp27mu-manylinux2010:
#    <<: 
#        - *test_minimal_template
#    image:
#        python:2.7

#gpgsign/cp27-cp27mu-manylinux2010:
#    <<: 
#        - *gpgsign_template
#    image:
#        python:2.7

#deploy/cp27-cp27mu-manylinux2010:
#    <<: 
#        - *deploy_template
#    image:
#        python:2.7


# ---------------
# Universal Python Jobs
build/py3-none-any:
    <<: 
        - *common_template

    stage: 
        build

    image: python:3.7

    before_script:
        - python -V  # Print out python version for debugging
        - pip install virtualenv
        - virtualenv venv
        - source venv/bin/activate
        - pip install pip -U
        - pip install pip setuptools -U

    script: 
        - export KWIMAGE_DISABLE_C_EXTENSIONS=1
        - python setup.py bdist_wheel
        - ls dist
        #- MB_PYTHON_TAG=py3-none-any
        #- # VERSION=$(python -c "import setup; print(setup.VERSION)")
        #- # BDIST_WHEEL_PATH=dist/kwimage-${VERSION}-${MB_PYTHON_TAG}.whl
        #- # pip install $BDIST_WHEEL_PATH
        #- # pip install pygments
        ## Hack to test the installed wheel. TODO: make run_tests work better in this case.
        #- # pip install -r requirements/tests.txt
        #- # mkdir -p foo && cd foo && python -m pytest --cov-config ../.coveragerc --cov-report html --cov-report term --cov=kwimage --xdoc $(python -c "import ubelt; print(ubelt.modname_to_modpath('kwimage'))") ../tests
        #- # xdoctest -m kwimage
          

    artifacts:
        paths:
            - dist/*.whl

    cache:
        paths:
            - .cache/pip


gpgsign/py3-none-any:
    <<: 
        - *common_template

    stage: 
        gpgsign

    script: 
        - ls dist
        - MB_PYTHON_TAG=py3-none-any
        - VERSION=$(python -c "import setup; print(setup.VERSION)")
        - BDIST_WHEEL_PATH=dist/kwimage-${VERSION}-${MB_PYTHON_TAG}.whl
        # Decrypt and import GPG Keys / trust
        - export GPG_EXECUTABLE=gpg
        - export GPG_KEYID=D297D757
        - $GPG_EXECUTABLE --version
        - openssl version
        - $GPG_EXECUTABLE --list-keys
        # note CI_KITWARE_SECRET is a protected variables only available on master and release branch
        - GLKWS=$CI_KITWARE_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -d -a -in dev/ci_public_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
        - GLKWS=$CI_KITWARE_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -d -a -in dev/gpg_owner_trust.enc | $GPG_EXECUTABLE --import-ownertrust
        - GLKWS=$CI_KITWARE_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -d -a -in dev/ci_secret_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
        - GPG_SIGN_CMD="$GPG_EXECUTABLE --batch --yes --detach-sign --armor --local-user $GPG_KEYID"
        #- # $GPG_EXECUTABLE --list-keys
        - echo "Signing wheels"
        - $GPG_SIGN_CMD --output $BDIST_WHEEL_PATH.asc $BDIST_WHEEL_PATH
        - ls dist
        - echo "Verifying wheels"
        - $GPG_EXECUTABLE --verify $BDIST_WHEEL_PATH.asc $BDIST_WHEEL_PATH  || echo "hack, the first run of gpg very fails"
        - $GPG_EXECUTABLE --verify $BDIST_WHEEL_PATH.asc $BDIST_WHEEL_PATH 
        - echo "Verified wheels"

    artifacts:
        paths:
            - dist/*.asc

    only:
        refs:
            # Gitlab will only expose protected variables on protected branches
            # (which I've set to be master and release), so only run this stage
            # there.
            - master
            - release
    image:
        python:3.7

deploy/py3-none-any:
    <<: 
        - *common_template

    image:
        python:3.7

    stage: 
        deploy

    script: 
        - ls dist
        - MB_PYTHON_TAG=py3-none-any
        - VERSION=$(python -c "import setup; print(setup.VERSION)")
        - BDIST_WHEEL_PATH=dist/kwimage-${VERSION}-${MB_PYTHON_TAG}.whl
        - pip install six pyopenssl ndg-httpsclient pyasn1 -U 
        - pip install requests[security] twine 
        - echo "Checking wheels"
        - ls -al ${BDIST_WHEEL_PATH}*
        - twine check $BDIST_WHEEL_PATH.asc $BDIST_WHEEL_PATH
        - echo "Uploading wheels"
        # todo, can we tag the branch here as well?
        # note TWINE_USERNAME and TWINE_PASSWORD are protected variables only available on master and release branch
        - twine upload --username $TWINE_USERNAME --password $TWINE_PASSWORD $BDIST_WHEEL_PATH.asc $BDIST_WHEEL_PATH
        # Have the server git-tag the release and push the tags
        - VERSION=$(python -c "import setup; print(setup.VERSION)")
        # do sed twice to handle the case of https clone with and without a read token
        - URL_HOST=$(git remote get-url origin | sed -e 's|https\?://.*@||g' | sed -e 's|https\?://||g')
        - echo "URL_HOST = $URL_HOST"
        - git config user.email "ci@gitlab.kitware.com"
        - git config user.name "Gitlab-CI"
        - git tag $VERSION -m "tarball tag $VERSION"
        - git push --tags "https://${GIT_PUSH_TOKEN}@${URL_HOST}"
            
    only:
        refs:
            - release


.__local_docker_heredoc__:
        - | 
            docker run -it python:3.8 bash

            cd $HOME
            git clone https://gitlab.kitware.com/computer-vision/kwarray.git
            cd $HOME/kwarray
            git checkout dev/0.5.10

            python -V  # Print out python version for debugging
            export PYVER=$(python -c "import sys; print('{}{}'.format(*sys.version_info[0:2]))")
            pip install virtualenv
            virtualenv venv$PYVER
            source venv$PYVER/bin/activate
            pip install pip -U
            pip install pip setuptools -U
            python -V  # Print out python version for debugging
            pip install -e .


            cd $HOME
            git clone https://gitlab.kitware.com/computer-vision/kwimage.git

            # python setup.py bdist_wheel --universal

            python -V  # Print out python version for debugging
            export PYVER=$(python -c "import sys; print('{}{}'.format(*sys.version_info[0:2]))")
            pip install virtualenv
            virtualenv venv$PYVER
            source venv$PYVER/bin/activate
            pip install pip -U
            pip install pip setuptools -U
            python -V  # Print out python version for debugging
            pip install .[tests]

            # Fixes the LibGL error
            #apt update && apt install libgl1-mesa-glx -y && rm -rf /var/lib/apt/lists/*

            xdoctest -m kwimage.structs.boxes all
            
            ./run_doctests.sh
            ./run_tests.py
